#include <fcntl.h>
#include <stdio.h>
#include <string.h>
#include <sys/types.h>
#include <unistd.h>
#include <stdlib.h>
#include <locale.h>

// Делаем файл удобным для обработки (функция возможно спорная, но исключает непредвиденные ситуации
// когда например алгоритм разбиения из-за большого количества лишнего записывает не то что нужно)
void form_file()
{
    int i;
    i = open("file", O_RDWR); // открываем файл на чтение и запись, возвращаем дескриптор
    char f[255];
    int size;
    size = read(i, f, 255);   // количество считанных байт записываем в сайз, сам текст в f
    close(i);                 // файл пока что закрываем

    // если видим символ перехода на новую строку ставим вместо него пробел
    for(int i = 0; i < size; i++)
    {
        if(f[i] == '\n')
        {
            f[i] = ' ';
        }
    }

    // если видим несколько пробелов подряд просто смещаем массив от итого элемента влево
    for (int i = 0; i < size; i++)
    {
        if((f[i] == ' ') && (f[i+1] == ' '))
        {
            for (int j = 0; j < size; j++)
            {
                f[i] = f[i+j];
            }
            
        }
    }

    // открываем файл и перезаписываем по дискриптору
    i = open("file", O_WRONLY | O_TRUNC );
    write(i, f, size);
    close(i); // закрываем файл
}

// сама функция по перемешиванию
void change()
{   
    int t = open("file", O_RDONLY);  // открываем файл для чтения
    char f[255];                     // тут будем хранить текст из файла в виде обычной строки
    int size;                        
    size = read(t, f, 255);          // записываем в сайз число счит. байт, а сам текст помещаем в f
    
    //выводим исходные данные на экран
    printf("Исходные данные: ");
    for (int i = 0; i < size; i++)
    {
        printf("%c", f[i]);
    }

    printf("\n--------------------------------\n");

    char buf[512][50] = {};   // записываем сюда полученную из потока строку следующим образом: 1 слово - 1 строка двумерного массива
    char clone[512][50];      // сюда будем клонировать массив buf, нужно для того чтобы мы сохранили первые и последние буквы
    int last_index[128];      // записываем индексы последних в строке элементов
    int j = 0, i = 0, q = 0;
    while(f[q] != '\0')       // продолжаем запись пока не встретим нуль-терминатор, тогда строка будет окончена
    {
        if(f[q] == ' ')       // пробел служит разделителем, если мы его встречаем, делаем переход
        {
            last_index[i] = j-1;       // записываем индекс последнего в слове(строке двумерного массива) элемента
            j = 0; q++; i++;           // если пробел: ставим j на начало массива, переходим в массиве на след. строку и соответсвенно увеличиваем q
        }
        else                           // если текущий символ не пробел продолжаем запись в буфер
        {
            buf[i][j] = f[q];
            clone[i][j] = f[q];        
            j++; q++;
        }  
    }

    // выводим промежуточный результат на экран
    for(int p = 0; p < i; p++)
    {
        for(int j = 0; j < size; j++)
        {
            printf("%c", buf[p][j]);
        }
        printf("\n");
    }

    printf("\n--------------------------------\n");
    // алгоритм перестановки
    char tmp;
    for (int i = 0; i < 128; i++)
    {
        for (int j = 0; j < 50; j++)
        {
                tmp = buf[i][j];              // 
                buf[i][j] = buf[i][j++];      //  стандартный swap
                buf[i][j++] = tmp;            //
                buf[i][0] = clone[i][0];      // в первый элемент помещаем 1 элемент строки из клона
                buf[i][last_index[i]] = clone[i][last_index[i]];     // тут тоже самое, только используем массив последних индексов     
        }
    }
    
    // результаты выводим на кран
    printf("Произошло перемешивание: \n");
    for(int p = 0; p < i; p++)
    {
        for(int j = 0; j < size; j++)
        {
            printf("%c", buf[p][j]);
        }
        printf("\n");
    }

}

// Открытие файла
int is_file_open(char *filename)
{
    int i = open(filename, O_RDWR | O_TRUNC);      // Открыли файл для чтения
    if(i != -1)                         // Проверяем открылся ли файл по значению дескриптора
    {
        printf("Successfuly opening file %d\n", i);
        return i;
    }
    else printf("Error: file not open.\n");
    exit(1);
}

int main()
{
    setlocale(LC_ALL, "rus");
    char f[255];                         // Сюда будем записывать наш поток
    int size;
    int i = is_file_open("file");                                   // Размер строки
    if((size = read(0, f, 255)) < 0)   // из нулевого потока (ст.поток ввода) берём данные и пихаем в f
    {
        printf("Error: %d\n", size);
        exit(1);
    }
    else
    {
         printf("\nSuccessfuly read: %d\n", size);
         write (i, f, size);         
    }
    
    form_file();
    change(i);
    return 0;
}
